{"version":3,"sources":["serviceWorker.js","app/layouts/ScrollToTop.jsx","app/layouts/NavBar.jsx","app/users/UserDetails/UserDetailed.jsx","app/users/UserList/User.jsx","app/users/UserList/Users.jsx","app/layouts/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","ScrollToTop","pathname","useLocation","useEffect","scrollTo","NavBar","sortByFirstName","sortByLastName","Navbar","collapseOnSelect","expand","variant","Container","Brand","as","NavLink","exact","to","process","Toggle","aria-controls","Collapse","id","Nav","className","DropdownButton","alignRight","title","color","Dropdown","Item","onClick","UserDetailed","useState","user","setUser","Axios","get","params","userid","then","response","status","data","Row","Image","src","avatar","width","height","Media","style","Body","first_name","last_name","email","User","Card","Link","Img","Title","Users","loading","setLoading","users","setUsers","sortedUsers","sort","a","b","fluid","type","map","Col","md","key","App","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.557160de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport { Navbar, Nav, Container, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default function NavBar ({sortByFirstName,sortByLastName}){\r\n\r\n    return(\r\n        <Navbar collapseOnSelect expand=\"lg\" variant=\"dark\" >\r\n            <Container>\r\n                <Navbar.Brand as={NavLink} exact to={process.env.PUBLIC_URL+\"/\"}>\r\n                    Users\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    {sortByFirstName &&\r\n                        <Nav>\r\n                            <DropdownButton\r\n                            alignRight\r\n                            title=\"Sort-by\"\r\n                            id=\"dropdown-menu-align-right\"\r\n                            color=\"danger\"\r\n                            variant=\"outline-light\"\r\n                            >\r\n                                <Dropdown.Item onClick={sortByFirstName} >\r\n                                    First Name\r\n                                </Dropdown.Item>\r\n                                <Dropdown.Item onClick={sortByLastName} >\r\n                                    Last Name\r\n                                </Dropdown.Item>\r\n                            </DropdownButton>\r\n                        </Nav>\r\n                    }\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {  Image, Media, Navbar, Row } from 'react-bootstrap';\r\nimport NavBar from '../../layouts/NavBar';\r\n\r\nconst UserDetailed = ({match}) =>{\r\n    const [user,setUser] = useState([])\r\n\r\n    useEffect(()=>{\r\n        Axios.get(`https://reqres.in/api/users/${match.params.userid}`).then(response=>{\r\n            if (response.status===200){\r\n                setUser(response.data.data)\r\n            }\r\n        })\r\n    },[])\r\n    return(\r\n        <>\r\n            <Row>\r\n                <NavBar/>\r\n            </Row>\r\n            <Row className=\"bg-white p-2\">\r\n                <Image src={user.avatar} width=\"100%\" height=\"500px\"/>\r\n                <Media style={{\"width\" : \"100%\"}}>\r\n                    <Media.Body className=\"p-2\">\r\n                        <h3>{user.first_name} {user.last_name} </h3>\r\n                        <h4>Email : <b>{user.email}</b></h4>\r\n                    </Media.Body>\r\n                </Media>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\nexport default UserDetailed","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function User({user}){\r\n    return(\r\n        <>\r\n            <Card as={Link} to={`/user/${user.id}`}>\r\n                <Card.Img src={user.avatar} variant=\"top\" />\r\n                <Card.Body>\r\n                    <Card.Title>{user.first_name} {user.last_name}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport Loader from 'react-loader-spinner';\r\nimport User from './User';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport NavBar from '../../layouts/NavBar';\r\n\r\n\r\n\r\nconst Users = () => {\r\n    const [loading,setLoading] =  useState(true)\r\n    const [users,setUsers] = useState([])\r\n\r\n    const sortByFirstName = () =>{\r\n        let sortedUsers = [...users].sort((a,b)=>a.first_name > b.first_name ?1:-1)\r\n        setUsers(sortedUsers)\r\n    }\r\n    const sortByLastName = () =>{\r\n        let sortedUsers = [...users].sort((a,b)=>a.last_name > b.last_name ?1:-1)\r\n        setUsers(sortedUsers)\r\n    }\r\n    useEffect(()=>{\r\n        Axios.get(\"https://reqres.in/api/users?delay=3\").then(response=>{\r\n            if (response.status===200){\r\n                setUsers(response.data.data)\r\n                setLoading(false)\r\n            }\r\n        })\r\n    },[])\r\n    return(\r\n        <>\r\n            <NavBar sortByFirstName={sortByFirstName} sortByLastName={sortByLastName}/>\r\n            <Container fluid>\r\n                {/* <Row>\r\n                    <Col className=\"sorthead float-right\">\r\n                        <Button className=\"float-right\" onClick={sortByFirstName}>First Name </Button> \r\n                        {\" \"}\r\n                        <Button onClick={sortByLastName}>Last Name </Button>\r\n                    </Col>\r\n                </Row> */}\r\n                <Row className=\"bg-white pl-4 pr-4\">\r\n                    { loading ?\r\n                        <>\r\n                            <Container>\r\n                                <Row>\r\n                                    <h2>Loading</h2>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Loader\r\n                                    type=\"Puff\"\r\n                                    color=\"#00BFFF\"\r\n                                    width={\"50%\"}\r\n                                    height={\"50%\"}\r\n                                    style={{\"margin\" : \"auto\"}}\r\n                                    />\r\n                                </Row>\r\n                            </Container>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <Row>\r\n                                { users.map(user=>\r\n                                    <Col md=\"4\" className=\"content-body\">\r\n                                        <User user={user} key={user.id}/>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default Users","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Route } from 'react-router-dom';\nimport UserDetailed from '../users/UserDetails/UserDetailed';\nimport Users from '../users/UserList/Users';\n\nfunction App() {\n  return (\n    <Container className=\"content-body\">\n      <Route exact path={\"/\"} component={Users}/>\n      <Route exact path={\"/user/:userid\"} component={UserDetailed}/>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app/layouts/styles.css';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layouts/ScrollToTop';\nimport App from './app/layouts/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ScrollToTop/>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}